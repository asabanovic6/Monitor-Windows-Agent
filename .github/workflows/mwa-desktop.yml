# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name:  Monitor Agent Desktop

# Trigger on every master branch push and pull request
on:
  push:
    branches:
      - main


jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Appx_Bundle: Always
      App_Packages_Directory: AppPackages
      Appx_Bundle_Platforms: x86|x64
      Appx_Package_Build_Mode: StoreUpload   # Generates the .msixupload/.appxupload file and the _Test folder for sideloading.
                                             # Use SideloadOnly to generate the _Test folder for sideloading only
      Solution_Path: Monitor-Windows-Agent.sln
      Test_Project_Directory: UnitTestProject
      Test_Project_Name: UnitTestProject.csproj
      Wpf_Project_Directory: Monitor-Windows-Agent
      Wpf_Project_Name: Monitor-Windows-Agent.csproj
      Wap_Project_Directory: Monitor-Windows-Agent.Package
      Wap_Project_Name: Monitor-Windows-Agent.Package.wapproj

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
    - name: Use Nerdbank.GitVersioning to set version variables
      uses: aarnott/nbgv@v0.3
      with:
        setAllVars: true

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1


    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.0

    # Test
    - name: Execute Unit Tests
      run: dotnet test $env:Test_Project_Directory\$env:Test_Project_Name

    # Restore the application
    - name:  Restore the Wpf application to populate the obj folder with the RuntimeIdentifiers
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Build the Windows Application Packaging project
    - name: Build the Windows Application Packaging Project (wapproj)
      run: msbuild $env:Wap_Project_Directory\$env:Wap_Project_Name /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle 
      env:
        Configuration: ${{ matrix.configuration }}


    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}



   
